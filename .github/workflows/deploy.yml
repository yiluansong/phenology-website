name: Build and Deploy Shiny App to AWS

on:
  push:
    branches:
      - main  # or the branch you want to deploy from
  pull_request:
    branches:
      - main

# Permission can be added at job level or workflow level    
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  shinyapps-io:
    runs-on: ubuntu-latest

    container:
      image: rocker/shiny-verse:latest
    
    steps:
    # Step 1: Checkout the code from GitHub
    - name: Checkout repository
      uses: actions/checkout@v3
    
    # Step 2: Deploy to shinyapps.io
    - name: Deploy to shinyapps.io
      run: |
        Rscript -e 'install.packages("rsconnect")'
        Rscript -e "rsconnect::setAccountInfo(name='${{ secrets.SHINYAPPS_USER }}', token='${{ secrets.SHINYAPPS_TOKEN }}', secret='${{ secrets.SHINYAPPS_SECRET }}')"
        Rscript -e "rsconnect::deployApp(appDir = './phenowatch', appName = 'phenowatch', account = '${{ secrets.SHINYAPPS_USER }}', server = 'shinyapps.io', upload = T, forceUpdate = T)"
      env:
        RSCONNECT_USER: ${{ secrets.SHINYAPPS_USER }}
        RSCONNECT_TOKEN: ${{ secrets.SHINYAPPS_TOKEN }}
        RSCONNECT_SECRET: ${{ secrets.SHINYAPPS_SECRET }}

  appr-unner:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the code from GitHub
    - name: Checkout repository
      uses: actions/checkout@v3
        
    # Step 2: Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: us-east-2
    
    # Step 3: Build Docker image
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -f Dockerfile -t phenology-website:latest .

    # Step 4: Push Docker image to AWS ECR
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 861486687156.dkr.ecr.us-east-2.amazonaws.com

    - name: Tag Docker image
      run: |
        docker tag phenology-website:latest 861486687156.dkr.ecr.us-east-2.amazonaws.com/phenology-website:latest

    - name: Push Docker image to ECR
      run: |
        docker push 861486687156.dkr.ecr.us-east-2.amazonaws.com/phenology-website:latest

    # Step 5: Deploy to AWS App Runner
    - name: Deploy to App Runner
      run: |
        aws apprunner update-service \
          --service-arn arn:aws:apprunner:us-east-2:861486687156:service/phenology-website/a4fe8389d6a744ada162975c0e3157b5 \
          --source-configuration '{"ImageRepository": {"ImageRepositoryType": "ECR","ImageIdentifier": "861486687156.dkr.ecr.us-east-2.amazonaws.com/phenology-website:latest","ImageConfiguration": {"Port": "3838"}}}'
