name: Build and Deploy Shiny App to AWS

on:
  push:
    branches:
      - main  # or the branch you want to deploy from
  pull_request:
    branches:
      - main

# Permission can be added at job level or workflow level    
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  shinyapps-io:
    runs-on: ubuntu-latest

    container:
      image: rocker/shiny-verse:latest
    
    steps:
    # Step 1: Checkout the code from GitHub
    - name: Checkout repository
      uses: actions/checkout@v3

    # Step 2: Install system dependencies
    - name: Install system dependencies
      run: |
        apt-get update
        apt-get install -y --no-install-recommends \
          libudunits2-dev \
          libgdal-dev \
          libgeos-dev \
          libproj-dev \
          libmysqlclient-dev

    # Step 3: Install R packages
    - name: Install R packages
      run: |
        Rscript -e "install.packages('rsconnect')"
        Rscript -e "install.packages(c('shinyjs', 'shinyscreenshot', 'geosphere', 'raster', 'gstat', 'ggpubr', 'gridExtra', 'maps', 'rnpn','leaflet', 'terra','colorRamps', 'lubridate','digest','aws.s3','ptw','doSNOW','svglite','ggnewscale'), dependencies = TRUE)"
            
    # Step 3: Deploy to shinyapps.io
    - name: Deploy to shinyapps.io
      run: |
      
        retries=0
        max_retries=10
        while [[ $retries -lt $max_retries ]]
        do
          echo "Attempt $((retries + 1)) of $max_retries"
          Rscript -e "rsconnect::setAccountInfo(name='${{ secrets.SHINYAPPS_USER }}', token='${{ secrets.SHINYAPPS_TOKEN }}', secret='${{ secrets.SHINYAPPS_SECRET }}')" && \
          Rscript -e "rsconnect::deployApp(appDir = './phenowatch', appName = 'phenowatch', account = '${{ secrets.SHINYAPPS_USER }}', server = 'shinyapps.io', upload = T, forceUpdate = T)" && {
            echo "Deployment successful."
            break
          } || {
            echo "Deployment failed, retrying in 5 minutes..."
            sleep 300 # wait for 5 minutes before retrying
            retries=$((retries + 1))
          }
        done
      shell: bash
      env:
        RSCONNECT_USER: ${{ secrets.SHINYAPPS_USER }}
        RSCONNECT_TOKEN: ${{ secrets.SHINYAPPS_TOKEN }}
        RSCONNECT_SECRET: ${{ secrets.SHINYAPPS_SECRET }}

  app-runner:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout the code from GitHub
    - name: Checkout repository
      uses: actions/checkout@v3
        
    # Step 2: Set up AWS CLI
    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
        aws-region: us-east-2
    
    # Step 3: Build Docker image
    - name: Set up Docker
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -f Dockerfile -t phenology-website:latest .

    # Step 4: Push Docker image to AWS ECR
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 861486687156.dkr.ecr.us-east-2.amazonaws.com

    - name: Tag Docker image
      run: |
        docker tag phenology-website:latest 861486687156.dkr.ecr.us-east-2.amazonaws.com/phenology-website:latest

    - name: Push Docker image to ECR
      run: |
        docker push 861486687156.dkr.ecr.us-east-2.amazonaws.com/phenology-website:latest

    # Step 5: Deploy to AWS App Runner
    - name: Deploy to App Runner
      run: |
      
        aws apprunner resume-service \
          --service-arn arn:aws:apprunner:us-east-2:861486687156:service/phenology-website/a4fe8389d6a744ada162975c0e3157b5 || {
          echo "Service resume failed, skipping this step."
          exit 0
          }
        echo "Service resumed successfully."
        
        echo "Fetching last deployment timestamp..."
        previous_deployment=$(aws apprunner describe-service \
          --service-arn arn:aws:apprunner:us-east-2:861486687156:service/phenology-website/a4fe8389d6a744ada162975c0e3157b5 \
          --query 'Service.UpdatedAt' --output text)
        
        # Update service loop
        retries=0
        max_retries=10
        while [[ $retries -lt $max_retries ]]
        do
          echo "Attempt $((retries + 1)) of $max_retries to update the service..."
          
          aws apprunner update-service \
            --service-arn arn:aws:apprunner:us-east-2:861486687156:service/phenology-website/a4fe8389d6a744ada162975c0e3157b5 \
            --source-configuration '{"ImageRepository": {"ImageRepositoryType": "ECR","ImageIdentifier": "861486687156.dkr.ecr.us-east-2.amazonaws.com/phenology-website:latest","ImageConfiguration": {"Port": "3838"}}}' && {
            echo "Update command accepted. Checking for deployment..."
            break
          }
        
          echo "Update service failed, retrying in 3 minutes..."
          sleep 180
          retries=$((retries + 1))
        done
        
        if [[ $retries -ge $max_retries ]]; then
          echo "Failed to update the service after $max_retries attempts. Exiting."
          exit 1
        fi
        
        # Wait for new deployment loop
        retries=0
        max_retries=10
        deployment_verified=false
        while [[ $retries -lt $max_retries ]]
        do
          echo "Attempt $((retries + 1)) of $max_retries to verify deployment..."
        
          new_deployment=$(aws apprunner describe-service \
            --service-arn arn:aws:apprunner:us-east-2:861486687156:service/phenology-website/a4fe8389d6a744ada162975c0e3157b5 \
            --query 'Service.UpdatedAt' --output text)
        
          if [[ "$new_deployment" != "$previous_deployment" ]]; then
            echo "New deployment detected at $new_deployment. Proceeding to pause the service."
            deployment_verified=true
            break
          else
            echo "No new deployment yet. Waiting 2 minutes before checking again..."
            sleep 120
            retries=$((retries + 1))
          fi
        done
        
        if [[ "$deployment_verified" == false ]]; then
          echo "No new deployment detected after $max_retries retries. Exiting."
          exit 1
        fi
        
        # Pause the service
        echo "Pausing the service..."
        aws apprunner pause-service \
          --service-arn arn:aws:apprunner:us-east-2:861486687156:service/phenology-website/a4fe8389d6a744ada162975c0e3157b5 
        
        echo "Service paused successfully."
